[
{
	"uri": "http://devdocs.prestashop.com/basics/",
	"title": "Basics",
	"tags": [],
	"description": "",
	"content": " Chapter 1 Basics Discover what PrestaShop is all about and the core concepts behind it.\n"
},
{
	"uri": "http://devdocs.prestashop.com/development/",
	"title": "Development",
	"tags": [],
	"description": "",
	"content": " Chapter 2 Development "
},
{
	"uri": "http://devdocs.prestashop.com/testing/",
	"title": "Testing",
	"tags": [],
	"description": "",
	"content": " Chapter 3 Testing "
},
{
	"uri": "http://devdocs.prestashop.com/documentation/",
	"title": "Documentation",
	"tags": [],
	"description": "",
	"content": " Chapter 4 Documentation "
},
{
	"uri": "http://devdocs.prestashop.com/basics/introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": " Fundamentals of PrestaShop Development PrestaShop was conceived so that third-party modules could easily build upon its foundations, making it an extremely customizable e-commerce software.\nPrestaShop’s customization is based on three possibilities:\n Themes, Modules, Overriding.  Themes are explored in full in the Designer Guide.\nModules and the override system are explored in this Developer Guide, starting with the “Concepts” section below. You can learn more about each in the following chapters:\nBy default, PrestaShop is provided with more than 100 modules, enabling you to launch your online business quickly and for free.\nMore than 3000 modules are also available on the Addons marketplace. These additional modules were built by the PrestaShop company or members of the PrestaShop community, and are sold at affordable prices. As a developer, you can also share your modules on this site, and receive 70% of the amounts associated with the sale of your creations. Sign up now!\n Concepts You should be familiar with PHP and Object-Oriented Programming before attempting to write your own module.\nYou can learn PHP here:\n http://www.php.net/manual/en/getting-started.php http://www.codecademy.com/tracks/php  You can learn Object-Oriented programming here:\n http://en.wikipedia.org/wiki/Object-oriented_programming http://net.tutsplus.com/tutorials/php/object-oriented-php-for-beginners/  A module is an extension to PrestaShop that enables any developer to add the following:\n Provide additional functionality to PrestaShop. View additional items on the site (product selection, etc.). Communicate with other e-commerce services (buying guides, payment platforms, logistics, etc.).  Overriding is a system in itself. PrestaShop uses completely object-oriented code. One of the advantages of this is that, with the right code architecture, you can easily replace or extend parts of the core code with your own custom code, without having to touch the core code. Your code thus overrides the core code, making PrestaShop behave as you prefer it to. It is not recommended to use an override in a module that you intend to distribute (for instance through the PrestaShop Addons marketplace), and they are forbidden in partner modules. Keep them for your own shop.\nPrestaShop’s technical architecture PrestaShop is based on a 3-tier architecture:\n Object/data. Database access is controlled through files in the “classes” folder. Data control. User-provided content is controlled by files in the root folder. Design. All of the theme’s files are in the “themes” folder.  This is the same principle as the Model\u0026gt;View\u0026gt;Controller (MVC) architecture, only in a simpler and more accessible way.\nWhile all versions of PrestaShop up to 1.6 took pride in only using a custom architecture, it was decided to incorporate the Symfony PHP framework starting with PrestaShop 1.7.\nThe driving idea is that we want our code to be more robust, more modular, and fully testable. The 1.6 architecture, inherited from version 1.5 and years of PrestaShop development, is not getting any younger, and its age is really starting to show.\nUsing a proven and popular open-source framework will allow us to focus on our core business code (managing a cart, handling orders, calculating prices and taxes, generating invoices, etc.) with greater efficiency, while enjoying the stability of a globally recognized framework.\nA 3-tier architecture has many advantages:\n It’s easier to read the software’s code. Developers can add and edit code faster. Graphic designer and HTML integrators can work with the confines of the /themes folder without having to understand or even read a single line of PHP code. Developers can work on additional data and modules that the HTML integrators can make use of.  Model A model represents the application’s behavior: data processing, database interaction, etc.\nIt describes or contains the data that have been processed by the application. It manages this data and guarantees its integrity.\nView A view is the interface with which the user interacts.\nIts first role is to display the data that is been provided by the model. Its second role is to handle all the actions from the user (mouse click, element selection, buttons, etc.), and send these events to the controller.\nThe view does not do any processing; it only displays the result of the processing performed by the model, and interacts with the user.\nController The Controller manages synchronization events between the Model and the View, and updates both as needed. It receives all the user events and triggers the actions to perform.\nIf an action needs data to be changed, the Controller will “ask” the Model to change the data, and in turn the Model will notify the View that the data has been changed, so that the View can update itself.\n"
},
{
	"uri": "http://devdocs.prestashop.com/modules/",
	"title": "Modules",
	"tags": [],
	"description": "",
	"content": " Chapter 5 Modules "
},
{
	"uri": "http://devdocs.prestashop.com/themes/",
	"title": "Themes",
	"tags": [],
	"description": "",
	"content": " Chapter 6 Themes "
},
{
	"uri": "http://devdocs.prestashop.com/basics/installation/configuration/",
	"title": "Configuration",
	"tags": [],
	"description": "",
	"content": " Configuring PrestaShop By default, PrestaShop is configured to provide a secure and stable environment to both the shop administrator and the customers.\nAs a developer, there are several changes that you could and should bring to the default installation in order to help you code better, spot bugs faster, and generally make a great PrestaShop product.\nDisabling the cache and forcing Smarty compilation When your development has an impact on the front office, whether you are building a theme or simply a module which displays information to the customer, you should force the template file compilation and disable the cache, so as to always see the result of your changes directly.\nGo to the “Performances” page under the “Advanced parameters” menu to change the following Smarty settings:\n Template cache: switch it to “Force compilation”. Cache: disable it.  Forcing the compilation of Smarty will always slow down the loading time of the page. Make sure that your production store is set to only recompile templates if there are updated files, and that its cache is enabled.\nDisplaying error messages PrestaShop’s default settings prevent the customer to see any server error message or any debugging code.\nYou, on the other hand, need this information in order to correct any potential mistake in your code. To that end, open the /config/defines.inc.php file, and edit it to set _PS_MODE_DEV_ to true:\n/* Debug only */ define('_PS_MODE_DEV_', true);  Using the dump() method These two methods enable you to check for the state of a given variable at a specific place within your code.\nPrestaShop used to have custom debug methods available for developers: p($variable) and d($variable). They were used to display the content of a variable, and were really a wrapper around the well-known print_r() method. On top of that, PrestaShop had the ppp() and ddd() methods, which were respectively the aliases of p() and d(); and the various fd(), epr() and dieObject() methods.\nAll of this has changed with PrestaShop 1.7: we now rely solely on Symonfy’s VarDumper::dump() function. You can now rely on a single method instead of having multiple debug functions. The dump() function is very powerful, and is always available on output (even without die()). Moreover, you can use it in your console scripts because this function also has a formatter in CLI mode.\nThe dump() method is not activated by default. To activate it, you must enable the Debug mode, by setting _PS_MODE_DEV_ to true (see above).\nEnabling the multistore mode Since version 1.5, PrestaShop is able to host more than one store within a single installation of the software. Many shop administrators choose to enable this feature, and it can have a significant impact on the way PrestaShop works. You should therefore make sure that anything you code for PrestaShop works in both single and multistore mode.\nEnabling the multistore mode is easy: go to the general preferences page, and put the “Enable Multistore” option to “Yes”.\nYou can switch back and forth between single store and multistore mode ? in single store mode, only the main store is used.\nYou can read more about the multistore mode in the PrestaShop 1.6 User Guide: http://doc.prestashop.com/display/PS16/Managing+Multiple+Shops.\nAbout the configuration files There are three main configuration files, all located in the /config folder:\n config.inc.php defines.inc.php smarty.config.inc.php  config.inc.php It is the main configuration file for PrestaShop. You should not have to touch anything in there.\ndefines.inc.php This file contains PrestaShop constant values.\nIt also contains the location of all the files and folders. If you need to change their location, do not forget to keep the original path nearby, for instance in a PHP comment, in case you need to revert back to it later on.\nWhen in development/test mode, you must make sure that all the error messages are displayed:\n Set define('_PS_MODE_DEV_', false); to true.  On the contrary, when in production mode, you must hide error messages as much as possible!\n Make sure that define('_PS_MODE_DEV_', false); is set to false.  smarty.config.inc.php This file contains all the Smarty-related settings.\nThe Smarty cache system should always be disabled, as it is not compatible with PrestaShop: keep $smarty-\u0026gt;caching = false; as it is.\n$smarty-\u0026gt;compile_check should be left to false in development mode.\n$smarty-\u0026gt;debugging gives access to Smarty debug information when displaying a page. That setting is more easily modified in the “Performance” page of the advanced parameters menu : the “Debug console” option enables you to choose between never displaying Smarty’s debug information, always displaying it, or only displaying it when you add ?SMARTY_DEBUG to the URL of the page you want to test, which can be very useful.\nWhen in production mode, $smarty-\u0026gt;force_compile must be set to false, as it will give a 30% boost to your page load time.\nOn the other hand, when editing a .tpl file, you must delete the /tools/smarty/compile folder (except the index.php file) in order to see your changes applied.\nNote that this setting can be made directly from the back office, in the “Performance” page under the “Advanced parameters” menu.\n"
},
{
	"uri": "http://devdocs.prestashop.com/development/database/",
	"title": "Database",
	"tags": [],
	"description": "",
	"content": " Accessing the database The database structure By default, PrestaShop’s database tables start with the ps_ prefix. This can be customized during installation\nAll table names are in lowercase, and words are separated with an underscore character (“_”):\n ps_employee ps_manufacturer ps_product ps_product_comment ps_shop_url  When a table establishes the links between two entities, the names of both entities are mentioned in the table’s name. For instance, ps_category_product links products to their category.\nA few details to note about tables:\n Tables which contain translations must end with the _lang suffix. For instance, ps_product_lang contains all the translations for the ps_product table. Tables which contain the records linking to a specific shop must end with the _shop suffix. For instance, ps_category_shop contains the position of each category depending on the store.  There is also a couple of standard practices for data rows within a table:\n Use the id_lang field to store the language associated with a record. Use the id_shop field to store the store associated with a record.  The DBQuery class The DBQuery class is a query builder which helps you create SQL queries. For instance:\n$sql = new DbQuery(); $sql-\u0026gt;select('*'); $sql-\u0026gt;from('cms', 'c'); $sql-\u0026gt;innerJoin('cms_lang', 'l', 'c.id_cms = l.id_cms AND l.id_lang = '.(int)$id_lang); $sql-\u0026gt;where('c.active = 1'); $sql-\u0026gt;orderBy('position'); return Db::getInstance()-\u0026gt;executeS($sql);  Here are some of the methods from this class:\n__toString() Generate and get the query. build() Generate and get the query (return a string). from(string $table, mixed $alias = null) Set table for FROM clause. groupBy(string $fields) Add a GROUP BY restriction. having(string $restriction) Add a restriction in the HAVING clause (each restriction will be separated by an AND statement). innerJoin(string $table, string $alias = null, string $on = null)  Add a INNER JOIN clause\nE.g. $this-innerJoin('product p ON ...').  join(string $join)  Add a JOIN clause\nE.g. $this-join('RIGHT JOIN'.DB_PREFIX.'produc t p ON ...');.  leftJoin(string $table, string $alias = null, string $on = null) Add a LEFT JOIN clause. leftOuterJoin(string $table, string $alias = null, string $on = null) Add a LEFT OUTER JOIN clause. limit(string $limit, mixed $offset = 0) Limit results in query. naturalJoin(string $table, string $alias = null) Add a NATURAL JOIN clause. orderBy(string $fields) Add an ORDER BY restriction. select(string $fields) Add fields in query selection. where(string $restriction) Add a restriction in WHERE clause (each restriction will be separated by an AND statement).  "
},
{
	"uri": "http://devdocs.prestashop.com/basics/installation/",
	"title": "Installation",
	"tags": [],
	"description": "",
	"content": " Setting Up Your Local Development Environment Now that you intend to develop for PrestaShop, you are better off keeping all your development work on your machine. The main advantage is that it makes it possible for you to entirely bypass the process of uploading your file on your online server in order to test it. Another advantage is that a local test environment enables you to test code without the risk of breaking your production store. Have a local environment is the essential first step in the path of web development.\nInstalling PrestaShop locally Prerequisites PrestaShop needs the following server configuration in order to run:\n System: Unix, Linux or Windows. Web serve: Apache Web Server 1.3 or any later version. PHP: 5.4 or later. MySQL: 5.0 or later. Server RAM: The more the better…  PrestaShop can also work with Microsoft’s IIS Web server 6.0 or later, and nginx 1.0 or later.\nInstalling a local environment Installing any web-application locally requires that you first install the adequate environment, namely the Apache web server, the PHP language interpreter, the MySQL database server, and ideally the phpMyAdmin tool. This is called an *AMP package: Apache+MySQL+PHP and the operating system, giving WAMP (Windows+Apache+MySQL+PHP), MAMP (Mac OS X+…) and LAMP (Linux+…). Since all of the items packaged are open-source, these installers are most of the time free.\nHere is a selection of free AMP installer:\n XAMPP: http://www.apachefriends.org/en/xampp.html (Windows, Mac OS X, Linux, Solaris) WampServer: http://www.wampserver.com/en/ (Windows) EasyPHP: http://www.easyphp.org/ (Windows) MAMP: http://www.mamp.info/ (Mac OS X)  Configuring PHP PrestaShop needs a few additions to PHP and MySQL in order to fully work. Make sure that your PHP configuration has the following settings and tools:\n GD library. The GD library (https://libgd.github.io/pages/about.html) enables PrestaShop to rework images that you upload, especially resizing them. Dom extension. The Dom extension enables to parse XML documents. PrestaShop uses it for various functionalities, like the Store Locator. It is also used by some modules, as well as the pear_xml_parse library. allow_url_fopen enabled. The allow_url_fopen directive enables modules to access remote files, which is an essential part of the payment process, among others things. It is therefore imperative to have it set to ON.  Here is a section of the php.ini file (the configuration file for PHP):\nextension = php_mysql.dll extension = php_gd2.dll allow_url_fopen = On # also recommended register_globals = Off magic_quotes_gpc = Off allow_url_include = Off  ###Downloading and extracting the PrestaShop files\nYou can download the latest version of PrestaShop at http://www.prestashop.com/en/downloads.\nYou can download the (unstable) development version on Github: https://github.com/PrestaShop/PrestaShop/archive/develop.zip.\nExtract the PrestaShop files, and put them in the root folder of the AMP installer you chose:\n XAMPP: C:\\xampp\\htdocs or /Applications/xampp/htdocs WampServer: C:\\wamp\\www EasyPHP: C:\\easyphp\\www MAMP: /Applications/MAMP/htdocs/  Creating a database for your local shop Open the phpMyAdmin tool using your browser. Its location depends on the AMP pack you chose:\n http://127.0.0.1/phpmyadmin (XAMPP, WampServer, MAMP), http://127.0.0.1/mysql (EasyPHP)  In the “Databases” tab, indicate the database name you want and validate by clicking on the “Create a database” button.\nInstalling PrestaShop Open the PrestaShop installer, which should be located at http://127.0.0.1/prestashop/install, and follow its instructions.\nYou can read the Getting Started guide for more details: http://doc.prestashop.com/display/PS17/Getting+Started.\nKeeping things secure Once your module is online, its files could be accessed by anyone from the Internet. Even if they cannot trigger anything but PHP errors, you might want to prevent this from happening.\nYou can achieve this by adding an index.php file at the root of any module folder you create. Here is a suggestion for what to put in the file.\nheader(\u0026quot;Expires: Mon, 26 Jul 1997 05:00:00 GMT\u0026quot;); header(\u0026quot;Last-Modified: \u0026quot;.gmdate(\u0026quot;D, d M Y H:i:s\u0026quot;).\u0026quot; GMT\u0026quot;); header(\u0026quot;Cache-Control: no-store, no-cache, must-revalidate\u0026quot;); header(\u0026quot;Cache-Control: post-check=0, pre-check=0\u0026quot;, false); header(\u0026quot;Pragma: no-cache\u0026quot;); header(\u0026quot;Location: ../\u0026quot;); exit;  "
},
{
	"uri": "http://devdocs.prestashop.com/development/database/objectmodel/",
	"title": "ObjectModel",
	"tags": [],
	"description": "",
	"content": " The ObjectModel class When needing to dive deep, you have to use the ObjectModel class. This is the main object of PrestaShop’s object model. It can be overridden… with precaution.\nIt is an Active Record kind of class (see: http://en.wikipedia.org/wiki/Active_record_pattern). The table attributes or view attributes of PrestaShop’s database are encapsulated in this class. Therefore, the class is tied to a database record. After the object has been instantiated, a new record is added to the database. Each object retrieves its data from the database; when an object is updated, the record to which it is tied is updated as well. The class implements accessors for each attribute.\nDefining the model You must use the $definition static variable in order to define the model.\nFor instance:\n/** * Example from the CMS model (CMSCore) */ public static $definition = array( 'table' =\u0026gt; 'cms', 'primary' =\u0026gt; 'id_cms', 'multilang' =\u0026gt; true, 'fields' =\u0026gt; array( 'id_cms_category' =\u0026gt; array('type' =\u0026gt; self::TYPE_INT, 'validate' =\u0026gt; 'isUnsignedInt'), 'position' =\u0026gt; array('type' =\u0026gt; self::TYPE_INT), 'active' =\u0026gt; array('type' =\u0026gt; self::TYPE_BOOL), // Language fields 'meta_description' =\u0026gt; array('type' =\u0026gt; self::TYPE_STRING, 'lang' =\u0026gt; true, 'validate' =\u0026gt; 'isGenericName', 'size' =\u0026gt; 255), 'meta_keywords' =\u0026gt; array('type' =\u0026gt; self::TYPE_STRING, 'lang' =\u0026gt; true, 'validate' =\u0026gt; 'isGenericName', 'size' =\u0026gt; 255), 'meta_title' =\u0026gt; array('type' =\u0026gt; self::TYPE_STRING, 'lang' =\u0026gt; true, 'validate' =\u0026gt; 'isGenericName', 'required' =\u0026gt; true, 'size' =\u0026gt; 128), 'link_rewrite' =\u0026gt; array('type' =\u0026gt; self::TYPE_STRING, 'lang' =\u0026gt; true, 'validate' =\u0026gt; 'isLinkRewrite', 'required' =\u0026gt; true, 'size' =\u0026gt; 128), 'content' =\u0026gt; array('type' =\u0026gt; self::TYPE_HTML, 'lang' =\u0026gt; true, 'validate' =\u0026gt; 'isString', 'size' =\u0026gt; 3999999999999), ), );  "
},
{
	"uri": "http://devdocs.prestashop.com/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://devdocs.prestashop.com/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://devdocs.prestashop.com/",
	"title": "Welcome",
	"tags": [],
	"description": "",
	"content": " PrestaShop Dev Documentation Welcome! Welcome to PrestaShop\u0026rsquo;s Developer Documentation!\nPrestaShop is a free and Open Source e-commerce web platform, committed to providing the best shopping cart experience for both merchants and customers. It is written in PHP, is highly customizable, supports all the major payment services, is translated in many languages and localized for many countries, has a fully responsive design (both front and back office), and more! Learn more about PrestaShop.\nThis site covers the technical aspects of PrestaShop and it\u0026rsquo;s tailored for theme, module and core developers.\n"
}]